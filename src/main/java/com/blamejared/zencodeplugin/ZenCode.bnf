{
  parserClass ="com.blamejared.zencodeplugin.parser.ZenCodeParser"
  parserUtilClass="com.blamejared.zencodeplugin.parser.ZenCodeParserUtil"
  psiImplUtilClass="com.blamejared.zencodeplugin.psi.ZenCodePsiImplUtil"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="ZenCode"
  psiImplClassSuffix="Impl"
  psiPackage="com.blamejared.zencodeplugin.psi"
  psiImplPackage="com.blamejared.zencodeplugin.psi.impl"

  //Generated
  elementTypeHolderClass="com.blamejared.zencodeplugin.psi.ZenCodeTypes"

  elementTypeClass="com.blamejared.zencodeplugin.psi.ZenCodeElementType"
  tokenTypeClass="com.blamejared.zencodeplugin.psi.ZenCodeTokenType"

  tokens=[
    T_COMMENT_SCRIPT='regexp:#[^\n]*[\n\\e]'
    T_COMMENT_SINGLELINE='regexp://[^\n]*'
    T_COMMENT_MULTILINE='regexp:/\*([^\\*]|(\\*+([^\\*/])))*\*+/'

    T_WHITESPACE_SPACE=' '
    T_WHITESPACE_TAB='\t'
    T_WHITESPACE_NEWLINE='\n'
    T_WHITESPACE_CARRIAGE_RETURN='\r'

    T_IDENTIFIER='regexp:@?[a-zA-Z_][a-zA-Z_0-9]*'
    T_LOCAL_IDENTIFIER='regexp:\$[a-zA-Z_][a-zA-Z_0-9]*'
    T_FLOAT='regexp:-?(0|[1-9][0-9]*)\.[0-9]+([eE][+\-]?[0-9]+)?[a-zA-Z_]*'
    T_INT='regexp:-?(0|[1-9][0-9_]*)[a-zA-Z_]*'
    T_PREFIXED_INT='regexp:-?(0b|0x|0o|0B|0X|0O)(0|[1-9a-fA-F][0-9a-fA-F_]*)[a-zA-Z_]*'
    T_STRING_DQ="regexp:\"([^\"\\\n]|\\(\['\\\"\\\/bfnrt&]|u[0-9a-fA-F]{4}))*\""
    T_STRING_DQ_WYSIWYG='regexp:"[^"]"'
    T_STRING_SQ="regexp:'([^'\\\n]|\\(['\"\\/bfnrt&]|u[0-9a-fA-F]{4}))*'"
    T_STRING_SQ_WYSIWYG="regexp:@'[^']'"
    T_AOPEN='{'
    T_ACLOSE='}'
    T_SQOPEN='['
    T_SQCLOSE=']'
    T_DOT3='...'
    T_DOT2='..'
    T_DOT='.'
    T_COMMA=','
    T_INCREMENT='++'
    T_ADDASSIGN='+='
    T_ADD='+'
    T_DECREMENT='--'
    T_SUBASSIGN='-='
    T_SUB='-'
    T_CATASSIGN='~='
    T_CAT='~'
    T_MULASSIGN='*='
    T_MUL='*'
    T_DIVASSIGN='/='
    T_DIV='/'
    T_MODASSIGN='%='
    T_MOD='%'
    T_ORASSIGN='|='
    T_OROR='||'
    T_OR='|'
    T_ANDASSIGN='&='
    T_ANDAND='&&'
    T_AND='&'
    T_XORASSIGN='^='
    T_XOR='^'
    T_COALESCE='??'
    T_OPTCALL='?.'
    T_QUEST='?'
    T_COLON=':'
    T_BROPEN='('
    T_BRCLOSE=')'
    T_SEMICOLON=';'
    T_LESSEQ='<='
    T_SHLASSIGN='<<='
    T_SHL='<<'
    T_LESS='<'
    T_GREATEREQ='>='
    T_USHR='>>>'
    T_USHRASSIGN='>>>='
    T_SHRASSIGN='>>='
    T_SHR='>>'
    T_GREATER='>'
    T_LAMBDA='=>'
    T_EQUAL3='==='
    T_EQUAL2='=='
    T_ASSIGN='='
    T_NOTEQUAL2='!=='
    T_NOTEQUAL='!='
    T_NOT='!'
    T_DOLLAR='$'
    T_BACKTICK='`'
    K_IMPORT='import'
    K_ALIAS='alias'
    K_CLASS='class'
    K_FUNCTION='function'
    K_INTERFACE='interface'
    K_ENUM='enum'
    K_STRUCT='struct'
    K_EXPAND='expand'
    K_VARIANT='variant'
    K_ABSTRACT='abstract'
    K_FINAL='final'
    K_OVERRIDE='override'
    K_CONST='const'
    K_PRIVATE='private'
    K_PUBLIC='public'
    K_EXPORT='export'
    K_INTERNAL='internal'
    K_STATIC='static'
    K_PROTECTED='protected'
    K_IMPLICIT='implicit'
    K_VIRTUAL='virtual'
    K_EXTERN='extern'
    K_IMMUTABLE='immutable'
    K_VAL='val'
    K_VAR='var'
    K_GET='get'
    K_IMPLEMENTS='implements'
    K_SET='set'
    K_VOID='void'
    K_BOOL='bool'
    K_BYTE='byte'
    K_SBYTE='sbyte'
    K_SHORT='short'
    K_USHORT='ushort'
    K_INT='int'
    K_UINT='uint'
    K_LONG='long'
    K_ULONG='ulong'
    K_USIZE='usize'
    K_FLOAT='float'
    K_DOUBLE='double'
    K_CHAR='char'
    K_STRING='string'
    K_IF='if'
    K_ELSE='else'
    K_DO='do'
    K_WHILE='while'
    K_FOR='for'
    K_THROW='throw'
    K_PANIC='panic'
    K_LOCK='lock'
    K_TRY='try'
    K_CATCH='catch'
    K_FINALLY='finally'
    K_RETURN='return'
    K_BREAK='break'
    K_CONTINUE='continue'
    K_SWITCH='switch'
    K_CASE='case'
    K_DEFAULT='default'
    K_IN='in'
    K_IS='is'
    K_AS='as'
    K_MATCH='match'
    K_THROWS='throws'
    K_SUPER='super'
    K_THIS='this'
    K_NULL='null'
    K_TRUE='true'
    K_FALSE='false'
    K_NEW='new'
  ]
}


ZenCodeFile ::= (Import*)? [(Definition|Statement)*]
Import ::= K_IMPORT T_DOT? Type [K_AS Type] T_SEMICOLON
Type ::= (PrimitiveType | ObjectType) [(TypeSuffix)*] [T_QUEST]
ZCStringLiteral ::= T_STRING_DQ | T_STRING_SQ

private TypeSuffix ::= (T_DOT2 Type) | ([T_QUEST](T_SQOPEN [(T_COMMA)*] (T_SQCLOSE | (T_LESS TypeParameters T_GREATER T_SQCLOSE) | (Type T_SQCLOSE))) StorageTag)
private PrimitiveType ::= K_VOID | K_BOOL | K_BYTE | K_SBYTE | K_SHORT | K_USHORT | K_INT | K_UINT | K_LONG | K_ULONG | K_USIZE | K_FLOAT | K_DOUBLE | K_CHAR
private ObjectType ::= (K_STRING | QualifiedType | FunctionType) [StorageTag]
private QualifiedType ::= (T_IDENTIFIER [(T_DOT T_IDENTIFIER)*])
private FunctionType ::= K_FUNCTION FunctionHeader
private FunctionHeader ::= StorageTag TypeParameters T_BROPEN FunctionParameters T_BRCLOSE [K_AS Type] [K_THROWS Type]
private FunctionParameters ::= FunctionParameter [(T_COMMA FunctionParameter)*]
private FunctionParameter ::= Annotations T_IDENTIFIER [T_DOT3] [K_AS Type] [T_ASSIGN Expression]
private TypeParameters ::= [T_LESS TypeParameter [(T_COMMA TypeParameter)*]]
private TypeParameter ::= T_IDENTIFIER StorageTag [(T_COLON [K_SUPER] Type)]
private StorageTag ::= [T_BACKTICK (K_STATIC | T_IDENTIFIER) [(T_COLON AnyToken)]]
private AnyToken ::= T_IDENTIFIER //TODO e.g. in ParsedStorageTag we just call parser.next().content regardless of type

private DefinitionModifier ::= (K_PUBLIC|K_PRIVATE|K_CONST|K_INTERNAL|K_EXTERN|K_ABSTRACT|K_FINAL|K_PROTECTED|K_IMPLICIT|K_VIRTUAL)
private Definition ::= (Annotation*)? [DefinitionModifier*] (ClassDefinition|InterfaceDefinition|EnumDefinition|StructDefinition|AliasDefinition|FunctionDefinition|ExpansionDefinition|VariantDefinition)
private Annotation ::= T_SQOPEN T_IDENTIFIER T_SQCLOSE
private Annotations ::= Annotation* //TODO actually look what they are lol

private ClassDefinition ::= K_CLASS T_IDENTIFIER T_AOPEN [Member*] T_ACLOSE
private InterfaceDefinition ::= K_INTERFACE T_IDENTIFIER T_AOPEN [Member*] T_ACLOSE
private EnumDefinition ::= K_ENUM T_IDENTIFIER T_AOPEN [Member*] T_ACLOSE
private StructDefinition ::= K_STRUCT T_IDENTIFIER T_AOPEN [Member*] T_ACLOSE
private AliasDefinition ::= K_ALIAS T_IDENTIFIER T_AOPEN [Member*] T_ACLOSE
private VariantDefinition ::= K_VARIANT T_IDENTIFIER T_AOPEN [Member*] T_ACLOSE
private ExpansionDefinition ::= K_EXPANSION T_IDENTIFIER T_AOPEN [Member*] T_ACLOSE

//TODO
private Member ::=T_IDENTIFIER T_IDENTIFIER T_IDENTIFIER T_IDENTIFIER T_IDENTIFIER T_IDENTIFIER T_IDENTIFIER

//TODO Parameters, return type
private FunctionDefinition ::= K_FUNCTION T_IDENTIFIER T_BROPEN T_BRCLOSE ((T_AOPEN [Statement*] T_ACLOSE) | (T_LAMBDA Expression))

//for_i loop
private Statement ::= StatementBlock | StatementBreak | StatementContinue |  StatementExpression | StatementIf | StatementLock | StatementReturn | StatementSwitch | StatementTryCatch | StatementVar | StatementWhileDo | StatementDoWhile | StatementForEach
StatementExpression ::= Expression T_SEMICOLON
StatementBlock ::= T_AOPEN [Statement*] T_ACLOSE
StatementBreak ::= K_BREAK [T_IDENTIFIER] T_SEMICOLON
StatementContinue ::= K_CONTINUE [T_IDENTIFIER] T_SEMICOLON
StatementIf ::= K_IF T_BROPEN Expression T_BRCLOSE Statement [K_ELSE Statement]
StatementLock ::= K_LOCK T_BROPEN Expression T_BRCLOSE Statement
StatementReturn ::= K_RETURN Expression T_SEMICOLON
StatementSwitch ::= K_SWITCH T_BROPEN Expression T_BRCLOSE T_AOPEN [(K_CASE (T_IDENTIFIER|K_DEFAULT) T_COLON Statement*)*] T_ACLOSE
StatementTryCatch ::= K_TRY Statement (K_CATCH T_BROPEN DeclareVariableName K_AS Type T_AOPEN Statement T_ACLOSE)* [K_FINALLY Statement]
StatementVar ::= (K_VAR|K_VAL) DeclareVariableName (K_AS Type)? [T_ASSIGN Expression] T_SEMICOLON

DeclareVariableName ::= T_IDENTIFIER {methods=[getName setName getNameIdentifier] implements="com.intellij.psi.PsiNameIdentifierOwner"}
VariableName ::= T_IDENTIFIER {methods=[setName getReference]}
StatementWhileDo ::= K_WHILE T_BROPEN Expression T_BRCLOSE Statement
StatementDoWhile ::= K_DO Statement K_WHILE T_BROPEN Expression T_BRCLOSE T_SEMICOLON
StatementForEach ::= K_FOR DeclareVariableName ((T_COMMA DeclareVariableName)*)? K_IN Expression Statement


Expression ::= ExpressionAssign
private ExpressionAssign ::= ExpressionConditional [AssignOperator ExpressionAssign]
private AssignOperator ::= T_ASSIGN | T_ADDASSIGN | T_SUBASSIGN | T_CATASSIGN | T_MULASSIGN | T_DIVASSIGN | T_MODASSIGN | T_ORASSIGN | T_ANDASSIGN | T_XORASSIGN | T_SHLASSIGN | T_SHRASSIGN | T_USHRASSIGN
private ExpressionConditional ::= ExpressionOrOr [T_QUEST Expression T_COLON Expression]
private ExpressionOrOr ::= ExpressionAndAnd [(T_OROR ExpressionAndAnd)*] [(T_COALESCE ExpressionAndAnd)*]
private ExpressionAndAnd ::= ExpressionOr [(T_ANDAND ExpressionOr)*]
private ExpressionOr ::= ExpressionXor [(T_OR ExpressionXor)*]
private ExpressionXor ::= ExpressionAnd [(T_XOR ExpressionAnd)*]
private ExpressionAnd ::= ExpressionCompare [(T_AND ExpressionCompare)*]
private ExpressionCompare ::= ExpressionShift [CompareOperator ExpressionShift]
private CompareOperator ::= T_EQUAL2 | T_EQUAL3 | T_NOTEQUAL | T_NOTEQUAL2 | T_LESS | T_LESSEQ | T_GREATER | T_GREATEREQ | K_IN | K_IS | (T_NOT (K_IN | K_IS))
private ExpressionShift ::= ExpressionAdd [(ShiftOperator ExpressionAdd)*]
private ShiftOperator ::= T_SHL | T_SHR | T_USHR
private ExpressionAdd ::= ExpressionMul [(AddOperator ExpressionMul)*]
private AddOperator ::= T_ADD | T_SUB | T_CAT
private ExpressionMul ::= ExpressionUnary [(MulOperator ExpressionUnary)*]
private MulOperator ::= T_MUL | T_DIV | T_MOD
private ExpressionUnary ::= (UnaryOperator ExpressionUnary) | ExpressionPostFix | (K_TRY ((T_QUEST | T_NOT) ExpressionUnary) | ExpressionPostFix)
private UnaryOperator ::= T_NOT | T_SUB | T_CAT | T_INCREMENT | T_DECREMENT
private ExpressionPostFix ::= ExpressionPrimary [(
                                    (T_DOT (T_IDENTIFIER TypeArguments) | T_DOLLAR | ZCStringLiteral)//Member get
                                     | (T_DOT2 ExpressionAssign)  //Range
                                     | (T_SQOPEN ExpressionAssign [(T_COMMA) ExpressionAssign] T_SQCLOSE) //Index get
                                     | CallArguments //Call
                                     | (K_AS [T_QUEST] Type) //Cast | Optional cast
                                     | T_INCREMENT | T_DECREMENT //Postfix
                                     | (T_LAMBDA LambdaBody)
                               )*]
private TypeArguments ::= [T_LESS Type [(T_COMMA Type)*] T_GREATER]
private CallArguments ::= T_BROPEN [Expression [(T_COMMA Expression)*]] T_BRCLOSE
private LambdaBody ::= StatementBlock | Expression
private ExpressionPrimary ::= ExpressionVariable | ExpressionSimple | ExpressionArray | ExpressionMap | ExpressionBracket | ExpressionNew | ExpressionThrow | ExpressionPanic | ExpressionMatch | ExpressionBEP | ExpressionType
private ExpressionVariable ::= VariableName
private ExpressionArray ::= T_SQOPEN [Expression [(T_COMMA Expression)*]] T_SQCLOSE
private ExpressionMap ::= T_AOPEN [MapPair [(T_COMMA MapPair)*]] T_ACLOSE
private MapPair ::= ExpressionAssign T_COLON ExpressionAssign
private ExpressionBracket ::= T_BROPEN ExpressionAssign [(T_COMMA ExpressionAssign)] T_BRCLOSE
private ExpressionNew ::= K_NEW Type CallArguments
private ExpressionThrow ::= K_THROW Expression
private ExpressionPanic ::= K_PANIC Expression
private ExpressionMatch ::= K_MATCH Expression T_AOPEN [MatchCase [(T_COMMA MatchCase)*]] T_ACLOSE
private MatchCase ::= (K_DEFAULT | Expression) T_LAMBDA Expression



private ExpressionType ::= Type
private ExpressionSimple ::= ExpressionLiteral | K_THIS | K_SUPER | T_DOLLAR
private ExpressionLiteral ::= T_INT | T_PREFIXED_INT | T_FLOAT | ZCStringLiteral | T_IDENTIFIER | T_LOCAL_IDENTIFIER | K_TRUE | K_FALSE | K_NULL


//TODO BEPs
ExpressionBEP ::= T_LESS T_IDENTIFIER [(T_COLON ValidBEPContent)*] T_GREATER
private ValidBEPContent ::= T_IDENTIFIER | T_INT
