/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.blamejared.zencodeplugin.flex;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.blamejared.zencodeplugin.psi.ZenCodeTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>ZenCodeLexer.flex</tt>
 */
public class _ZenCodeLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [8, 6, 7]
   * Total runtime size is 1040 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>13]|((ch>>7)&0x3f)]|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 136 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\207\100");

  /* The ZZ_CMAP_Y table has 128 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\177\200");

  /* The ZZ_CMAP_A table has 256 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\43\1\1\2\0\1\2\22\0\1\44\1\64\1\31\1\3\1\13\1\52\1\40\1\33\1\57\1"+
    "\60\1\7\1\20\1\47\1\14\1\16\1\5\1\15\11\12\1\56\1\61\1\62\1\50\1\63\1\55\1"+
    "\10\1\107\1\25\2\30\1\17\1\30\2\11\1\112\1\11\1\105\2\11\1\110\1\27\1\106"+
    "\2\11\1\111\4\11\1\26\2\11\1\32\1\6\1\41\1\54\1\21\1\65\1\71\1\22\1\74\1\75"+
    "\1\4\1\34\1\77\1\101\1\66\1\11\1\104\1\72\1\67\1\35\1\24\1\70\1\11\1\36\1"+
    "\73\1\37\1\42\1\76\1\103\1\23\1\100\1\102\1\45\1\53\1\46\1\51\201\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\1\4\1\5\1\1"+
    "\1\3\1\6\1\7\1\10\1\6\1\11\1\12\2\3"+
    "\1\1\1\13\1\1\4\3\1\14\1\15\1\3\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\14\3\1\0\2\41\3\3\1\0\1\42"+
    "\1\0\1\43\1\44\1\0\1\6\1\0\1\6\1\45"+
    "\1\46\1\47\1\6\1\50\1\51\1\52\4\3\3\0"+
    "\1\53\2\0\1\54\12\3\1\55\1\56\3\3\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67"+
    "\1\70\1\71\1\72\1\73\1\74\1\75\1\3\1\76"+
    "\6\3\1\77\14\3\1\100\12\3\1\101\1\0\2\42"+
    "\1\0\1\102\1\6\2\103\1\104\4\3\1\0\1\105"+
    "\3\0\1\106\4\3\1\107\3\3\1\110\6\3\1\111"+
    "\1\112\1\113\1\114\1\115\1\116\13\3\1\117\17\3"+
    "\1\120\1\121\1\122\6\3\1\123\1\124\1\101\1\125"+
    "\2\102\1\126\1\3\1\127\1\3\3\0\4\3\1\130"+
    "\1\3\1\131\1\3\1\132\1\133\3\3\1\134\13\3"+
    "\1\135\1\136\12\3\1\137\1\3\1\140\2\3\1\141"+
    "\10\3\1\102\1\0\1\142\1\3\3\0\1\3\1\143"+
    "\1\144\1\145\1\3\1\146\1\147\1\150\6\3\1\151"+
    "\3\3\1\152\1\3\1\153\1\154\3\3\1\155\1\156"+
    "\2\3\1\157\1\160\1\161\4\3\1\162\2\3\1\163"+
    "\1\164\1\165\1\3\3\0\2\3\1\166\1\167\1\170"+
    "\3\3\1\171\4\3\1\172\1\3\1\173\1\174\1\175"+
    "\1\176\2\3\1\177\5\3\1\0\1\3\1\200\6\3"+
    "\1\201\2\3\1\202\1\203\1\204\1\3\1\205\1\206"+
    "\1\0\1\207\1\3\1\210\2\3\1\211\1\3\1\212"+
    "\1\213\1\3\1\0\1\214\1\215\1\3\1\216\1\3"+
    "\1\0\1\217\1\3\1\0\1\220\3\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[417];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\113\0\113\0\226\0\341\0\u012c\0\u0177\0\u01c2"+
    "\0\u020d\0\u0258\0\u02a3\0\u02ee\0\u0339\0\u0384\0\u03cf\0\u041a"+
    "\0\u0465\0\u04b0\0\113\0\u04fb\0\u0546\0\u0591\0\u05dc\0\u0627"+
    "\0\u0672\0\113\0\u06bd\0\113\0\113\0\113\0\113\0\113"+
    "\0\u0708\0\u0753\0\u079e\0\u07e9\0\u0834\0\u087f\0\113\0\113"+
    "\0\113\0\113\0\u08ca\0\u0915\0\u0960\0\113\0\u09ab\0\u09f6"+
    "\0\u0a41\0\u0a8c\0\u0ad7\0\u0b22\0\u0b6d\0\u0bb8\0\u0c03\0\u0c4e"+
    "\0\u0c99\0\u0ce4\0\226\0\113\0\226\0\u0d2f\0\u0d7a\0\u0dc5"+
    "\0\u0e10\0\u0e5b\0\u0ea6\0\u0e10\0\113\0\u0ef1\0\u0f3c\0\u0f87"+
    "\0\u0fd2\0\u101d\0\113\0\113\0\u1068\0\u10b3\0\113\0\113"+
    "\0\u10fe\0\u1149\0\u1194\0\u11df\0\u122a\0\u1275\0\u12c0\0\113"+
    "\0\u04fb\0\u130b\0\113\0\u1356\0\u13a1\0\u13ec\0\u1437\0\u1482"+
    "\0\u14cd\0\u1518\0\u1563\0\u15ae\0\u15f9\0\113\0\113\0\u1644"+
    "\0\u168f\0\u16da\0\u1725\0\113\0\113\0\113\0\113\0\113"+
    "\0\113\0\113\0\113\0\113\0\u1770\0\u17bb\0\u1806\0\u020d"+
    "\0\u1851\0\u189c\0\u020d\0\u18e7\0\u1932\0\u197d\0\u19c8\0\u1a13"+
    "\0\u1a5e\0\u020d\0\u1aa9\0\u1af4\0\u1b3f\0\u1b8a\0\u1bd5\0\u1c20"+
    "\0\u1c6b\0\u1cb6\0\u1d01\0\u1d4c\0\u1d97\0\u1de2\0\u1e2d\0\u1e78"+
    "\0\u1ec3\0\u1f0e\0\u1f59\0\u1fa4\0\u1fef\0\u203a\0\u2085\0\u20d0"+
    "\0\u211b\0\u0e10\0\u2166\0\u21b1\0\u21fc\0\u2247\0\u2292\0\u22dd"+
    "\0\u2328\0\u2373\0\113\0\u23be\0\u2409\0\u2454\0\u249f\0\u24ea"+
    "\0\113\0\u2535\0\u2580\0\u25cb\0\u020d\0\u2616\0\u2661\0\u26ac"+
    "\0\u26f7\0\u020d\0\u2742\0\u278d\0\u27d8\0\u020d\0\u2823\0\u286e"+
    "\0\u28b9\0\u2904\0\u294f\0\u299a\0\113\0\113\0\113\0\u29e5"+
    "\0\113\0\u2a30\0\u2a7b\0\u2ac6\0\u2b11\0\u2b5c\0\u2ba7\0\u2bf2"+
    "\0\u2c3d\0\u2c88\0\u2cd3\0\u2d1e\0\u2d69\0\u020d\0\u2db4\0\u2dff"+
    "\0\u2e4a\0\u2e95\0\u2ee0\0\u2f2b\0\u2f76\0\u2fc1\0\u300c\0\u3057"+
    "\0\u30a2\0\u30ed\0\u3138\0\u3183\0\u31ce\0\u3219\0\u020d\0\u020d"+
    "\0\u3264\0\u32af\0\u32fa\0\u3345\0\u3390\0\u33db\0\u020d\0\u020d"+
    "\0\113\0\113\0\u3426\0\u3471\0\u020d\0\u34bc\0\u020d\0\u3507"+
    "\0\u3552\0\u359d\0\u35e8\0\u3633\0\u367e\0\u36c9\0\u3714\0\u020d"+
    "\0\u375f\0\u020d\0\u37aa\0\u020d\0\u020d\0\u37f5\0\u3840\0\u388b"+
    "\0\113\0\u38d6\0\u3921\0\u396c\0\u39b7\0\u3a02\0\u3a4d\0\u3a98"+
    "\0\u3ae3\0\u3b2e\0\u3b79\0\u3bc4\0\u020d\0\u020d\0\u3c0f\0\u3c5a"+
    "\0\u3ca5\0\u3cf0\0\u3d3b\0\u3d86\0\u3dd1\0\u3e1c\0\u3e67\0\u3eb2"+
    "\0\u020d\0\u3efd\0\u020d\0\u3f48\0\u3f93\0\u020d\0\u3fde\0\u4029"+
    "\0\u4074\0\u40bf\0\u410a\0\u4155\0\u41a0\0\u41eb\0\u4236\0\u4281"+
    "\0\u020d\0\u42cc\0\u4317\0\u4362\0\u43ad\0\u43f8\0\u4443\0\u020d"+
    "\0\u020d\0\u448e\0\u44d9\0\u020d\0\u020d\0\u4524\0\u456f\0\u45ba"+
    "\0\u4605\0\u4650\0\u469b\0\u020d\0\u46e6\0\u4731\0\u477c\0\u020d"+
    "\0\u47c7\0\u020d\0\u020d\0\u4812\0\u485d\0\u48a8\0\u020d\0\u020d"+
    "\0\u48f3\0\u493e\0\u020d\0\u020d\0\u020d\0\u4989\0\u49d4\0\u4a1f"+
    "\0\u4a6a\0\u020d\0\u4ab5\0\u4b00\0\u020d\0\u020d\0\u020d\0\u4b4b"+
    "\0\u4b96\0\u4be1\0\u4c2c\0\u4c77\0\u4cc2\0\u020d\0\u020d\0\u020d"+
    "\0\u4d0d\0\u4d58\0\u4da3\0\u020d\0\u4dee\0\u4e39\0\u4e84\0\u4ecf"+
    "\0\u020d\0\u4f1a\0\u020d\0\u020d\0\u020d\0\u020d\0\u4f65\0\u4fb0"+
    "\0\u020d\0\u4ffb\0\u5046\0\u5091\0\u50dc\0\u5127\0\u5172\0\u51bd"+
    "\0\u020d\0\u5208\0\u5253\0\u529e\0\u52e9\0\u5334\0\u537f\0\u020d"+
    "\0\u53ca\0\u5415\0\u020d\0\u020d\0\u020d\0\u5460\0\u020d\0\u020d"+
    "\0\u54ab\0\u020d\0\u54f6\0\u020d\0\u5541\0\u558c\0\u020d\0\u55d7"+
    "\0\u020d\0\u020d\0\u5622\0\u566d\0\u020d\0\u020d\0\u56b8\0\u020d"+
    "\0\u5703\0\u574e\0\u020d\0\u5799\0\u57e4\0\u020d\0\u582f\0\u587a"+
    "\0\u58c5";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[417];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\2\1\3\1\4\1\5\1\6\1\2\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\11\1\17"+
    "\1\11\1\20\1\11\1\21\4\11\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64"+
    "\1\65\1\66\1\67\1\70\3\11\1\71\1\11\1\72"+
    "\5\11\113\0\1\73\1\74\2\73\1\75\1\73\1\75"+
    "\104\73\4\0\1\11\4\0\2\11\2\0\1\11\1\0"+
    "\1\11\1\0\2\11\1\76\5\11\3\0\1\11\1\77"+
    "\2\11\2\0\1\11\23\0\4\11\1\100\20\11\5\101"+
    "\1\102\1\103\1\0\40\101\1\104\42\101\50\0\1\105"+
    "\46\0\1\11\4\0\1\11\5\0\1\11\1\0\10\11"+
    "\2\0\1\106\4\11\2\0\1\11\23\0\25\11\4\0"+
    "\1\11\4\0\2\11\2\0\1\11\1\0\1\11\1\0"+
    "\10\11\3\0\4\11\2\0\1\11\23\0\25\11\4\0"+
    "\1\107\4\0\1\107\1\12\2\0\1\12\1\110\1\107"+
    "\1\0\1\111\7\107\3\0\4\107\2\0\1\107\23\0"+
    "\25\107\4\0\1\112\4\0\1\112\5\0\1\112\1\0"+
    "\10\112\3\0\4\112\2\0\1\112\23\0\25\112\12\0"+
    "\1\12\1\0\1\113\1\15\32\0\1\114\46\0\1\107"+
    "\4\0\1\107\4\0\1\110\1\107\1\0\1\107\6\115"+
    "\1\107\3\0\4\107\2\0\1\107\23\0\25\107\16\0"+
    "\1\116\114\0\1\117\27\0\1\120\46\0\1\11\4\0"+
    "\2\11\2\0\1\11\1\0\1\11\1\0\3\11\1\121"+
    "\4\11\3\0\2\11\1\122\1\11\2\0\1\11\23\0"+
    "\12\11\1\123\12\11\4\0\1\11\4\0\2\11\2\0"+
    "\1\11\1\0\1\11\1\0\10\11\3\0\4\11\2\0"+
    "\1\11\23\0\10\11\1\124\14\11\1\125\1\126\4\125"+
    "\1\127\22\125\1\130\61\125\1\131\1\0\4\131\1\132"+
    "\24\131\1\133\57\131\4\0\1\11\4\0\2\11\2\0"+
    "\1\11\1\0\1\11\1\0\3\11\1\134\4\11\3\0"+
    "\4\11\2\0\1\135\23\0\1\136\2\11\1\137\1\140"+
    "\20\11\4\0\1\141\4\0\2\11\2\0\1\11\1\0"+
    "\1\11\1\0\10\11\3\0\4\11\2\0\1\142\23\0"+
    "\25\11\4\0\1\143\4\0\2\11\2\0\1\11\1\0"+
    "\1\11\1\0\10\11\3\0\4\11\2\0\1\11\23\0"+
    "\25\11\4\0\1\11\4\0\2\11\2\0\1\11\1\0"+
    "\1\11\1\0\10\11\3\0\2\11\1\144\1\11\2\0"+
    "\1\11\23\0\13\11\1\145\11\11\40\0\1\146\7\0"+
    "\1\147\46\0\1\11\4\0\2\11\2\0\1\11\1\0"+
    "\1\11\1\0\10\11\3\0\4\11\2\0\1\11\23\0"+
    "\1\150\3\11\1\151\1\152\17\11\50\0\1\153\12\0"+
    "\1\154\77\0\1\155\112\0\1\156\112\0\1\157\2\0"+
    "\1\160\107\0\1\161\60\0\1\162\36\0\1\163\105\0"+
    "\1\164\11\0\1\165\113\0\1\166\77\0\1\167\46\0"+
    "\1\11\4\0\2\11\2\0\1\11\1\0\1\11\1\0"+
    "\10\11\3\0\1\170\1\171\2\11\2\0\1\11\23\0"+
    "\1\11\1\172\3\11\1\173\17\11\4\0\1\11\4\0"+
    "\2\11\2\0\1\11\1\0\1\11\1\0\10\11\3\0"+
    "\4\11\2\0\1\11\23\0\3\11\1\174\21\11\4\0"+
    "\1\11\4\0\2\11\2\0\1\11\1\0\1\11\1\0"+
    "\10\11\3\0\2\11\1\175\1\11\2\0\1\176\23\0"+
    "\3\11\1\177\21\11\4\0\1\11\4\0\2\11\2\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\200\6\11\3\0"+
    "\4\11\2\0\1\11\23\0\4\11\1\201\1\202\17\11"+
    "\4\0\1\11\4\0\2\11\2\0\1\11\1\0\1\11"+
    "\1\0\3\11\1\203\4\11\3\0\4\11\2\0\1\11"+
    "\23\0\25\11\4\0\1\204\4\0\2\11\2\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\205\6\11\3\0\3\11"+
    "\1\206\2\0\1\207\23\0\13\11\1\210\1\11\1\211"+
    "\7\11\4\0\1\11\4\0\2\11\2\0\1\11\1\0"+
    "\1\11\1\0\3\11\1\212\4\11\3\0\4\11\2\0"+
    "\1\11\23\0\3\11\1\213\1\214\6\11\1\215\11\11"+
    "\4\0\1\216\4\0\2\11\2\0\1\11\1\0\1\11"+
    "\1\0\3\11\1\217\4\11\3\0\4\11\2\0\1\11"+
    "\23\0\25\11\4\0\1\11\4\0\2\11\2\0\1\11"+
    "\1\0\1\11\1\0\3\11\1\220\4\11\3\0\4\11"+
    "\2\0\1\11\23\0\1\221\2\11\1\222\21\11\4\0"+
    "\1\223\4\0\2\11\2\0\1\11\1\0\1\11\1\0"+
    "\10\11\3\0\4\11\2\0\1\11\23\0\25\11\4\0"+
    "\1\11\4\0\2\11\2\0\1\11\1\0\1\11\1\0"+
    "\10\11\3\0\4\11\2\0\1\11\23\0\13\11\1\224"+
    "\11\11\4\0\1\11\4\0\2\11\2\0\1\11\1\0"+
    "\1\11\1\0\1\225\7\11\3\0\4\11\2\0\1\11"+
    "\23\0\25\11\4\0\1\11\4\0\2\11\2\0\1\11"+
    "\1\0\1\11\1\0\10\11\3\0\3\11\1\226\2\0"+
    "\1\11\23\0\2\11\1\227\22\11\4\0\1\11\4\0"+
    "\2\11\2\0\1\11\1\0\1\11\1\0\10\11\3\0"+
    "\4\11\2\0\1\230\23\0\25\11\4\0\1\11\4\0"+
    "\2\11\2\0\1\11\1\0\1\11\1\0\10\11\3\0"+
    "\4\11\2\0\1\11\23\0\5\11\1\231\17\11\5\101"+
    "\1\232\1\233\1\0\103\101\1\102\1\101\4\102\1\234"+
    "\1\235\103\102\5\101\1\232\1\103\1\0\103\101\33\236"+
    "\1\0\57\236\4\0\1\107\4\0\1\107\5\0\1\107"+
    "\1\0\10\107\3\0\4\107\2\0\1\107\23\0\25\107"+
    "\12\0\1\237\2\0\1\237\101\0\1\107\4\0\1\107"+
    "\1\111\2\0\1\111\1\0\1\107\1\0\1\111\7\107"+
    "\3\0\4\107\2\0\1\107\23\0\25\107\4\0\1\112"+
    "\4\0\2\112\2\0\1\112\1\0\1\112\1\0\10\112"+
    "\3\0\4\112\2\0\1\112\23\0\25\112\4\0\1\240"+
    "\4\0\1\107\1\241\2\0\1\242\1\0\1\240\1\0"+
    "\1\107\1\240\2\107\1\240\2\107\1\240\3\0\1\240"+
    "\3\107\2\0\1\107\23\0\3\107\1\240\2\107\2\240"+
    "\11\107\1\240\3\107\16\0\1\243\100\0\1\11\4\0"+
    "\2\11\2\0\1\11\1\0\1\11\1\0\3\11\1\244"+
    "\4\11\3\0\4\11\2\0\1\11\23\0\25\11\4\0"+
    "\1\245\4\0\2\11\2\0\1\11\1\0\1\11\1\0"+
    "\10\11\3\0\4\11\2\0\1\11\23\0\25\11\4\0"+
    "\1\11\4\0\2\11\2\0\1\11\1\0\1\11\1\0"+
    "\10\11\3\0\3\11\1\246\2\0\1\11\23\0\25\11"+
    "\4\0\1\247\4\0\2\11\2\0\1\11\1\0\1\11"+
    "\1\0\10\11\3\0\4\11\2\0\1\11\23\0\25\11"+
    "\1\125\1\0\4\125\1\250\22\125\1\130\61\125\31\0"+
    "\1\251\112\0\1\251\1\252\7\0\1\253\55\0\2\131"+
    "\13\0\1\131\6\0\1\131\1\0\6\131\1\0\1\254"+
    "\54\0\1\11\4\0\2\11\2\0\1\11\1\0\1\11"+
    "\1\0\10\11\3\0\2\11\1\255\1\11\2\0\1\11"+
    "\23\0\25\11\4\0\1\11\4\0\2\11\2\0\1\11"+
    "\1\0\1\11\1\0\10\11\3\0\1\11\1\256\2\11"+
    "\2\0\1\11\23\0\25\11\4\0\1\11\4\0\2\11"+
    "\2\0\1\11\1\0\1\11\1\0\10\11\3\0\1\11"+
    "\1\257\2\11\2\0\1\11\23\0\25\11\4\0\1\11"+
    "\4\0\2\11\2\0\1\11\1\0\1\11\1\0\10\11"+
    "\3\0\4\11\2\0\1\11\23\0\4\11\1\260\20\11"+
    "\4\0\1\11\4\0\2\11\2\0\1\11\1\0\1\11"+
    "\1\0\3\11\1\261\4\11\3\0\4\11\2\0\1\11"+
    "\23\0\25\11\4\0\1\11\4\0\2\11\2\0\1\11"+
    "\1\0\1\11\1\0\10\11\3\0\4\11\2\0\1\11"+
    "\23\0\15\11\1\262\7\11\4\0\1\11\4\0\2\11"+
    "\2\0\1\11\1\0\1\11\1\0\10\11\3\0\4\11"+
    "\2\0\1\11\23\0\4\11\1\263\20\11\4\0\1\11"+
    "\4\0\2\11\2\0\1\11\1\0\1\11\1\0\10\11"+
    "\3\0\3\11\1\264\2\0\1\11\23\0\25\11\4\0"+
    "\1\11\4\0\2\11\2\0\1\11\1\0\1\11\1\0"+
    "\10\11\3\0\4\11\2\0\1\265\23\0\12\11\1\266"+
    "\12\11\4\0\1\11\4\0\2\11\2\0\1\11\1\0"+
    "\1\11\1\0\10\11\3\0\2\11\1\267\1\11\2\0"+
    "\1\11\23\0\1\270\24\11\4\0\1\11\4\0\2\11"+
    "\2\0\1\11\1\0\1\11\1\0\10\11\3\0\1\11"+
    "\1\271\2\11\2\0\1\11\23\0\25\11\4\0\1\11"+
    "\4\0\2\11\2\0\1\11\1\0\1\11\1\0\3\11"+
    "\1\272\4\11\3\0\4\11\2\0\1\11\23\0\25\11"+
    "\4\0\1\11\4\0\2\11\2\0\1\11\1\0\1\11"+
    "\1\0\10\11\3\0\4\11\2\0\1\11\23\0\1\273"+
    "\12\11\1\274\11\11\50\0\1\275\112\0\1\276\112\0"+
    "\1\277\12\0\1\300\77\0\1\301\46\0\1\11\4\0"+
    "\2\11\2\0\1\11\1\0\1\11\1\0\10\11\3\0"+
    "\3\11\1\302\2\0\1\11\23\0\25\11\4\0\1\11"+
    "\4\0\2\11\2\0\1\11\1\0\1\11\1\0\10\11"+
    "\3\0\4\11\2\0\1\11\23\0\1\11\1\303\1\304"+
    "\22\11\4\0\1\11\4\0\2\11\2\0\1\11\1\0"+
    "\1\11\1\0\10\11\3\0\3\11\1\305\2\0\1\11"+
    "\23\0\25\11\4\0\1\11\4\0\2\11\2\0\1\11"+
    "\1\0\1\11\1\0\3\11\1\306\4\11\3\0\4\11"+
    "\2\0\1\11\23\0\1\307\24\11\4\0\1\11\4\0"+
    "\2\11\2\0\1\11\1\0\1\11\1\0\1\11\1\310"+
    "\6\11\3\0\4\11\2\0\1\11\23\0\25\11\4\0"+
    "\1\11\4\0\2\11\2\0\1\11\1\0\1\11\1\0"+
    "\10\11\3\0\1\11\1\311\2\11\2\0\1\11\23\0"+
    "\25\11\4\0\1\11\4\0\2\11\2\0\1\11\1\0"+
    "\1\11\1\0\10\11\3\0\4\11\2\0\1\11\23\0"+
    "\5\11\1\312\17\11\4\0\1\11\4\0\2\11\2\0"+
    "\1\11\1\0\1\11\1\0\10\11\3\0\4\11\2\0"+
    "\1\11\23\0\1\313\24\11\4\0\1\11\4\0\2\11"+
    "\2\0\1\11\1\0\1\11\1\0\10\11\3\0\1\11"+
    "\1\314\2\11\2\0\1\11\23\0\6\11\1\315\16\11"+
    "\4\0\1\11\4\0\2\11\2\0\1\11\1\0\1\11"+
    "\1\0\10\11\3\0\3\11\1\316\2\0\1\11\23\0"+
    "\25\11\4\0\1\11\4\0\2\11\2\0\1\11\1\0"+
    "\1\11\1\0\10\11\3\0\4\11\2\0\1\11\23\0"+
    "\12\11\1\317\12\11\4\0\1\11\4\0\2\11\2\0"+
    "\1\11\1\0\1\11\1\0\10\11\3\0\2\11\1\320"+
    "\1\11\2\0\1\11\23\0\3\11\1\321\21\11\4\0"+
    "\1\11\4\0\2\11\2\0\1\11\1\0\1\11\1\0"+
    "\10\11\3\0\4\11\2\0\1\11\23\0\2\11\1\322"+
    "\22\11\4\0\1\11\4\0\2\11\2\0\1\11\1\0"+
    "\1\11\1\0\3\11\1\323\4\11\3\0\4\11\2\0"+
    "\1\11\23\0\25\11\4\0\1\11\4\0\2\11\2\0"+
    "\1\11\1\0\1\11\1\0\10\11\3\0\4\11\2\0"+
    "\1\11\23\0\1\324\24\11\4\0\1\11\4\0\2\11"+
    "\2\0\1\11\1\0\1\11\1\0\10\11\3\0\1\11"+
    "\1\325\2\11\2\0\1\11\23\0\25\11\4\0\1\11"+
    "\4\0\2\11\2\0\1\11\1\0\1\11\1\0\10\11"+
    "\3\0\3\11\1\326\2\0\1\11\23\0\5\11\1\327"+
    "\17\11\4\0\1\11\4\0\2\11\2\0\1\11\1\0"+
    "\1\11\1\0\10\11\3\0\4\11\2\0\1\11\23\0"+
    "\3\11\1\330\21\11\4\0\1\11\4\0\2\11\2\0"+
    "\1\11\1\0\1\11\1\0\10\11\3\0\4\11\2\0"+
    "\1\11\23\0\3\11\1\331\21\11\4\0\1\11\4\0"+
    "\2\11\2\0\1\11\1\0\1\11\1\0\10\11\3\0"+
    "\1\332\3\11\2\0\1\11\23\0\25\11\4\0\1\11"+
    "\4\0\2\11\2\0\1\11\1\0\1\11\1\0\10\11"+
    "\3\0\4\11\2\0\1\333\23\0\25\11\4\0\1\11"+
    "\4\0\2\11\2\0\1\11\1\0\1\11\1\0\10\11"+
    "\3\0\4\11\2\0\1\11\23\0\1\334\24\11\4\0"+
    "\1\11\4\0\2\11\2\0\1\11\1\0\1\11\1\0"+
    "\10\11\3\0\2\11\1\335\1\11\2\0\1\11\23\0"+
    "\25\11\4\0\1\11\4\0\2\11\2\0\1\11\1\0"+
    "\1\11\1\0\10\11\3\0\2\11\1\336\1\11\2\0"+
    "\1\11\23\0\4\11\1\337\20\11\4\0\1\11\4\0"+
    "\2\11\2\0\1\11\1\0\1\11\1\0\10\11\3\0"+
    "\3\11\1\340\2\0\1\11\23\0\25\11\4\0\1\11"+
    "\4\0\2\11\2\0\1\11\1\0\1\11\1\0\10\11"+
    "\3\0\4\11\2\0\1\11\23\0\1\341\24\11\4\0"+
    "\1\11\4\0\2\11\2\0\1\11\1\0\1\342\1\0"+
    "\10\11\3\0\4\11\2\0\1\11\23\0\21\11\1\343"+
    "\3\11\4\0\1\344\4\0\2\11\2\0\1\11\1\0"+
    "\1\11\1\0\10\11\3\0\4\11\2\0\1\11\23\0"+
    "\25\11\4\0\1\11\4\0\2\11\2\0\1\11\1\0"+
    "\1\11\1\0\3\11\1\345\4\11\3\0\4\11\2\0"+
    "\1\11\23\0\3\11\1\346\21\11\4\0\1\11\4\0"+
    "\2\11\2\0\1\11\1\0\1\11\1\0\10\11\3\0"+
    "\4\11\2\0\1\11\23\0\1\11\1\347\23\11\4\0"+
    "\1\350\4\0\2\11\2\0\1\11\1\0\1\11\1\0"+
    "\10\11\3\0\4\11\2\0\1\11\23\0\25\11\5\101"+
    "\1\351\1\233\1\0\103\101\1\102\1\101\3\102\1\235"+
    "\1\234\1\235\103\102\1\235\1\0\111\235\33\0\1\352"+
    "\63\0\1\353\4\0\1\354\1\237\2\0\1\237\1\0"+
    "\1\353\1\0\10\354\3\0\4\354\2\0\1\354\23\0"+
    "\25\354\4\0\1\240\4\0\1\107\1\241\2\0\1\241"+
    "\1\0\1\240\1\0\2\240\2\107\1\240\2\107\1\240"+
    "\3\0\1\240\3\107\2\0\1\107\23\0\3\107\1\240"+
    "\2\107\2\240\11\107\1\240\3\107\4\0\1\241\4\0"+
    "\1\242\1\241\2\0\1\241\1\0\1\241\1\0\2\241"+
    "\2\242\1\241\2\242\1\241\3\0\1\241\3\242\2\0"+
    "\1\242\23\0\3\242\1\241\2\242\2\241\11\242\1\241"+
    "\3\242\4\0\1\242\4\0\1\242\5\0\1\242\1\0"+
    "\10\242\3\0\4\242\2\0\1\242\23\0\25\242\4\0"+
    "\1\11\4\0\2\11\2\0\1\11\1\0\1\11\1\0"+
    "\10\11\3\0\4\11\2\0\1\11\23\0\4\11\1\355"+
    "\20\11\4\0\1\11\4\0\2\11\2\0\1\11\1\0"+
    "\1\11\1\0\10\11\3\0\4\11\2\0\1\11\23\0"+
    "\3\11\1\356\21\11\4\0\1\357\4\0\2\11\2\0"+
    "\1\11\1\0\1\11\1\0\10\11\3\0\4\11\2\0"+
    "\1\11\23\0\25\11\4\0\1\11\4\0\2\11\2\0"+
    "\1\11\1\0\1\11\1\0\10\11\3\0\2\11\1\360"+
    "\1\11\2\0\1\11\23\0\25\11\32\0\1\252\7\0"+
    "\1\253\103\0\1\361\63\0\1\362\5\0\1\362\2\0"+
    "\1\362\1\0\1\362\2\0\1\362\2\0\1\362\2\0"+
    "\1\362\3\0\1\362\34\0\1\362\2\0\2\362\11\0"+
    "\1\362\7\0\1\363\5\0\1\363\2\0\1\363\1\0"+
    "\1\363\2\0\1\363\2\0\1\363\2\0\1\363\3\0"+
    "\1\363\34\0\1\363\2\0\2\363\11\0\1\363\7\0"+
    "\1\11\4\0\2\11\2\0\1\11\1\0\1\11\1\0"+
    "\10\11\3\0\4\11\2\0\1\11\23\0\6\11\1\364"+
    "\16\11\4\0\1\11\4\0\2\11\2\0\1\11\1\0"+
    "\1\11\1\0\10\11\3\0\4\11\2\0\1\11\23\0"+
    "\3\11\1\365\21\11\4\0\1\11\4\0\2\11\2\0"+
    "\1\11\1\0\1\11\1\0\10\11\3\0\4\11\2\0"+
    "\1\11\23\0\5\11\1\366\17\11\4\0\1\11\4\0"+
    "\2\11\2\0\1\11\1\0\1\11\1\0\10\11\3\0"+
    "\4\11\2\0\1\11\23\0\3\11\1\367\21\11\4\0"+
    "\1\11\4\0\2\11\2\0\1\11\1\0\1\11\1\0"+
    "\10\11\3\0\4\11\2\0\1\11\23\0\4\11\1\370"+
    "\20\11\4\0\1\11\4\0\2\11\2\0\1\11\1\0"+
    "\1\11\1\0\10\11\3\0\4\11\2\0\1\371\23\0"+
    "\25\11\4\0\1\372\4\0\2\11\2\0\1\11\1\0"+
    "\1\11\1\0\10\11\3\0\4\11\2\0\1\11\23\0"+
    "\25\11\4\0\1\11\4\0\2\11\2\0\1\11\1\0"+
    "\1\11\1\0\3\11\1\373\4\11\3\0\4\11\2\0"+
    "\1\11\23\0\25\11\4\0\1\11\4\0\2\11\2\0"+
    "\1\11\1\0\1\11\1\0\10\11\3\0\4\11\2\0"+
    "\1\11\23\0\5\11\1\374\17\11\4\0\1\11\4\0"+
    "\2\11\2\0\1\11\1\0\1\11\1\0\10\11\3\0"+
    "\3\11\1\375\2\0\1\11\23\0\25\11\4\0\1\11"+
    "\4\0\2\11\2\0\1\11\1\0\1\11\1\0\10\11"+
    "\3\0\1\11\1\376\2\11\2\0\1\11\23\0\25\11"+
    "\4\0\1\11\4\0\2\11\2\0\1\11\1\0\1\11"+
    "\1\0\10\11\3\0\4\11\2\0\1\11\23\0\14\11"+
    "\1\377\10\11\4\0\1\11\4\0\2\11\2\0\1\11"+
    "\1\0\1\11\1\0\3\11\1\u0100\4\11\3\0\4\11"+
    "\2\0\1\11\23\0\25\11\50\0\1\u0101\46\0\1\u0102"+
    "\4\0\2\11\2\0\1\11\1\0\1\11\1\0\10\11"+
    "\3\0\4\11\2\0\1\11\23\0\25\11\4\0\1\11"+
    "\4\0\2\11\2\0\1\11\1\0\1\11\1\0\10\11"+
    "\3\0\4\11\2\0\1\u0103\23\0\25\11\4\0\1\11"+
    "\4\0\2\11\2\0\1\11\1\0\1\11\1\0\3\11"+
    "\1\u0104\4\11\3\0\4\11\2\0\1\11\23\0\4\11"+
    "\1\u0105\20\11\4\0\1\11\4\0\2\11\2\0\1\11"+
    "\1\0\1\11\1\0\10\11\3\0\4\11\2\0\1\11"+
    "\23\0\6\11\1\u0106\16\11\4\0\1\11\4\0\2\11"+
    "\2\0\1\11\1\0\1\11\1\0\10\11\3\0\3\11"+
    "\1\u0107\2\0\1\11\23\0\25\11\4\0\1\11\4\0"+
    "\2\11\2\0\1\11\1\0\1\11\1\0\10\11\3\0"+
    "\4\11\2\0\1\11\23\0\10\11\1\u0108\14\11\4\0"+
    "\1\11\4\0\2\11\2\0\1\11\1\0\1\11\1\0"+
    "\10\11\3\0\4\11\2\0\1\11\23\0\4\11\1\u0109"+
    "\20\11\4\0\1\11\4\0\2\11\2\0\1\11\1\0"+
    "\1\11\1\0\10\11\3\0\4\11\2\0\1\11\23\0"+
    "\1\u010a\24\11\4\0\1\11\4\0\2\11\2\0\1\11"+
    "\1\0\1\11\1\0\10\11\3\0\3\11\1\u010b\2\0"+
    "\1\11\23\0\25\11\4\0\1\11\4\0\2\11\2\0"+
    "\1\11\1\0\1\11\1\0\10\11\3\0\4\11\2\0"+
    "\1\11\23\0\3\11\1\u010c\21\11\4\0\1\11\4\0"+
    "\2\11\2\0\1\11\1\0\1\11\1\0\10\11\3\0"+
    "\4\11\2\0\1\11\23\0\11\11\1\u010d\13\11\4\0"+
    "\1\11\4\0\2\11\2\0\1\11\1\0\1\11\1\0"+
    "\10\11\3\0\4\11\2\0\1\11\23\0\16\11\1\u010e"+
    "\6\11\4\0\1\11\4\0\2\11\2\0\1\11\1\0"+
    "\1\11\1\0\10\11\3\0\3\11\1\u010f\2\0\1\11"+
    "\23\0\25\11\4\0\1\11\4\0\2\11\2\0\1\11"+
    "\1\0\1\11\1\0\10\11\3\0\4\11\2\0\1\u0110"+
    "\23\0\1\u0111\24\11\4\0\1\11\4\0\2\11\2\0"+
    "\1\11\1\0\1\11\1\0\10\11\3\0\3\11\1\u0112"+
    "\2\0\1\11\23\0\25\11\4\0\1\u0113\4\0\2\11"+
    "\2\0\1\11\1\0\1\11\1\0\10\11\3\0\4\11"+
    "\2\0\1\11\23\0\25\11\4\0\1\11\4\0\2\11"+
    "\2\0\1\11\1\0\1\11\1\0\10\11\3\0\2\11"+
    "\1\u0114\1\11\2\0\1\11\23\0\25\11\4\0\1\11"+
    "\4\0\2\11\2\0\1\11\1\0\1\11\1\0\10\11"+
    "\3\0\3\11\1\u0115\2\0\1\11\23\0\25\11\4\0"+
    "\1\11\4\0\2\11\2\0\1\11\1\0\1\11\1\0"+
    "\10\11\3\0\3\11\1\u0116\2\0\1\11\23\0\5\11"+
    "\1\u0117\17\11\4\0\1\11\4\0\2\11\2\0\1\11"+
    "\1\0\1\11\1\0\10\11\3\0\4\11\2\0\1\11"+
    "\23\0\6\11\1\u0118\16\11\4\0\1\u0119\4\0\2\11"+
    "\2\0\1\11\1\0\1\11\1\0\10\11\3\0\4\11"+
    "\2\0\1\11\23\0\25\11\4\0\1\11\4\0\2\11"+
    "\2\0\1\11\1\0\1\11\1\0\10\11\3\0\4\11"+
    "\2\0\1\11\23\0\5\11\1\u011a\17\11\4\0\1\11"+
    "\4\0\2\11\2\0\1\11\1\0\1\11\1\0\10\11"+
    "\3\0\2\11\1\u011b\1\11\2\0\1\11\23\0\25\11"+
    "\4\0\1\11\4\0\2\11\2\0\1\11\1\0\1\11"+
    "\1\0\10\11\3\0\4\11\2\0\1\11\23\0\3\11"+
    "\1\u011c\21\11\4\0\1\11\4\0\2\11\2\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\u011d\6\11\3\0\4\11"+
    "\2\0\1\11\23\0\25\11\4\0\1\11\4\0\2\11"+
    "\2\0\1\11\1\0\1\11\1\0\10\11\3\0\4\11"+
    "\2\0\1\11\23\0\7\11\1\u011e\15\11\4\0\1\11"+
    "\4\0\2\11\2\0\1\11\1\0\1\11\1\0\10\11"+
    "\3\0\3\11\1\u011f\2\0\1\11\23\0\25\11\4\0"+
    "\1\11\4\0\2\11\2\0\1\11\1\0\1\11\1\0"+
    "\10\11\3\0\4\11\2\0\1\11\23\0\1\u0120\24\11"+
    "\4\0\1\11\4\0\2\11\2\0\1\11\1\0\1\11"+
    "\1\0\10\11\3\0\4\11\2\0\1\11\23\0\4\11"+
    "\1\u0121\20\11\4\0\1\11\4\0\2\11\2\0\1\11"+
    "\1\0\1\11\1\0\5\11\1\u0122\2\11\3\0\4\11"+
    "\2\0\1\11\23\0\25\11\4\0\1\11\4\0\2\11"+
    "\2\0\1\11\1\0\1\11\1\0\6\11\1\u0123\1\11"+
    "\3\0\4\11\2\0\1\11\23\0\25\11\4\0\1\11"+
    "\4\0\2\11\2\0\1\11\1\0\1\11\1\0\10\11"+
    "\3\0\2\11\1\u0124\1\11\2\0\1\11\23\0\25\11"+
    "\4\0\1\11\4\0\2\11\2\0\1\11\1\0\1\11"+
    "\1\0\10\11\3\0\2\11\1\u0125\1\11\2\0\1\11"+
    "\23\0\25\11\4\0\1\11\4\0\2\11\2\0\1\11"+
    "\1\0\1\11\1\0\10\11\3\0\1\11\1\u0126\2\11"+
    "\2\0\1\11\23\0\25\11\4\0\1\354\4\0\1\354"+
    "\1\u0127\1\0\1\u0128\1\u0127\1\0\1\354\1\u0128\10\354"+
    "\3\0\4\354\2\0\1\354\23\0\25\354\4\0\1\354"+
    "\4\0\1\354\5\0\1\354\1\0\10\354\3\0\4\354"+
    "\2\0\1\354\23\0\25\354\4\0\1\11\4\0\2\11"+
    "\2\0\1\11\1\0\1\11\1\0\10\11\3\0\4\11"+
    "\2\0\1\11\23\0\16\11\1\u0129\6\11\4\0\1\11"+
    "\4\0\2\11\2\0\1\11\1\0\1\11\1\0\10\11"+
    "\3\0\2\11\1\u012a\1\11\2\0\1\11\23\0\25\11"+
    "\6\0\1\u012b\110\0\1\u012c\5\0\1\u012c\2\0\1\u012c"+
    "\1\0\1\u012c\2\0\1\u012c\2\0\1\u012c\2\0\1\u012c"+
    "\3\0\1\u012c\34\0\1\u012c\2\0\2\u012c\11\0\1\u012c"+
    "\7\0\1\u012d\5\0\1\u012d\2\0\1\u012d\1\0\1\u012d"+
    "\2\0\1\u012d\2\0\1\u012d\2\0\1\u012d\3\0\1\u012d"+
    "\34\0\1\u012d\2\0\2\u012d\11\0\1\u012d\7\0\1\11"+
    "\4\0\2\11\2\0\1\11\1\0\1\11\1\0\10\11"+
    "\3\0\3\11\1\u012e\2\0\1\11\23\0\25\11\4\0"+
    "\1\11\4\0\2\11\2\0\1\11\1\0\1\11\1\0"+
    "\10\11\3\0\4\11\2\0\1\11\23\0\4\11\1\u012f"+
    "\20\11\4\0\1\u0130\4\0\2\11\2\0\1\11\1\0"+
    "\1\11\1\0\10\11\3\0\4\11\2\0\1\11\23\0"+
    "\25\11\4\0\1\11\4\0\2\11\2\0\1\11\1\0"+
    "\1\11\1\0\10\11\3\0\3\11\1\u0131\2\0\1\11"+
    "\23\0\25\11\4\0\1\11\4\0\2\11\2\0\1\11"+
    "\1\0\1\11\1\0\10\11\3\0\2\11\1\u0132\1\11"+
    "\2\0\1\11\23\0\25\11\4\0\1\11\4\0\2\11"+
    "\2\0\1\11\1\0\1\11\1\0\10\11\3\0\4\11"+
    "\2\0\1\11\23\0\15\11\1\u0133\7\11\4\0\1\11"+
    "\4\0\2\11\2\0\1\11\1\0\1\11\1\0\10\11"+
    "\3\0\4\11\2\0\1\11\23\0\11\11\1\u0134\13\11"+
    "\4\0\1\u0135\4\0\2\11\2\0\1\11\1\0\1\11"+
    "\1\0\10\11\3\0\4\11\2\0\1\11\23\0\25\11"+
    "\4\0\1\11\4\0\2\11\2\0\1\11\1\0\1\11"+
    "\1\0\10\11\3\0\2\11\1\u0136\1\11\2\0\1\11"+
    "\23\0\25\11\4\0\1\11\4\0\2\11\2\0\1\11"+
    "\1\0\1\11\1\0\10\11\3\0\2\11\1\u0137\1\11"+
    "\2\0\1\11\23\0\25\11\4\0\1\11\4\0\2\11"+
    "\2\0\1\11\1\0\1\11\1\0\10\11\3\0\3\11"+
    "\1\u0138\2\0\1\11\23\0\25\11\4\0\1\11\4\0"+
    "\2\11\2\0\1\11\1\0\1\11\1\0\10\11\3\0"+
    "\2\11\1\u0139\1\11\2\0\1\11\23\0\25\11\4\0"+
    "\1\u013a\4\0\2\11\2\0\1\11\1\0\1\11\1\0"+
    "\10\11\3\0\4\11\2\0\1\11\23\0\1\u013b\24\11"+
    "\4\0\1\11\4\0\2\11\2\0\1\11\1\0\1\11"+
    "\1\0\10\11\3\0\4\11\2\0\1\11\23\0\13\11"+
    "\1\u013c\11\11\4\0\1\u013d\4\0\2\11\2\0\1\11"+
    "\1\0\1\11\1\0\10\11\3\0\4\11\2\0\1\11"+
    "\23\0\25\11\4\0\1\11\4\0\2\11\2\0\1\11"+
    "\1\0\1\11\1\0\10\11\3\0\4\11\2\0\1\11"+
    "\23\0\3\11\1\u013e\21\11\4\0\1\11\4\0\2\11"+
    "\2\0\1\11\1\0\1\11\1\0\10\11\3\0\4\11"+
    "\2\0\1\11\23\0\1\u013f\24\11\4\0\1\11\4\0"+
    "\2\11\2\0\1\11\1\0\1\11\1\0\10\11\3\0"+
    "\4\11\2\0\1\11\23\0\6\11\1\u0140\16\11\4\0"+
    "\1\11\4\0\2\11\2\0\1\11\1\0\1\11\1\0"+
    "\10\11\3\0\2\11\1\u0141\1\11\2\0\1\11\23\0"+
    "\25\11\4\0\1\11\4\0\2\11\2\0\1\11\1\0"+
    "\1\11\1\0\10\11\3\0\4\11\2\0\1\11\23\0"+
    "\5\11\1\u0142\17\11\4\0\1\u0143\4\0\2\11\2\0"+
    "\1\11\1\0\1\11\1\0\10\11\3\0\4\11\2\0"+
    "\1\11\23\0\25\11\4\0\1\11\4\0\2\11\2\0"+
    "\1\11\1\0\1\11\1\0\10\11\3\0\4\11\2\0"+
    "\1\11\23\0\6\11\1\u0144\16\11\4\0\1\11\4\0"+
    "\2\11\2\0\1\11\1\0\1\11\1\0\10\11\3\0"+
    "\1\11\1\u0145\2\11\2\0\1\11\23\0\25\11\4\0"+
    "\1\11\4\0\2\11\2\0\1\11\1\0\1\11\1\0"+
    "\10\11\3\0\4\11\2\0\1\11\23\0\1\u0146\24\11"+
    "\4\0\1\11\4\0\2\11\2\0\1\11\1\0\1\11"+
    "\1\0\10\11\3\0\2\11\1\u0147\1\11\2\0\1\11"+
    "\23\0\25\11\4\0\1\11\4\0\2\11\2\0\1\11"+
    "\1\0\1\11\1\0\10\11\3\0\3\11\1\u0148\2\0"+
    "\1\11\23\0\25\11\4\0\1\11\4\0\2\11\2\0"+
    "\1\11\1\0\1\11\1\0\10\11\3\0\4\11\2\0"+
    "\1\11\23\0\6\11\1\u0149\16\11\4\0\1\11\4\0"+
    "\2\11\2\0\1\11\1\0\1\11\1\0\10\11\3\0"+
    "\4\11\2\0\1\11\23\0\1\u014a\24\11\4\0\1\11"+
    "\4\0\2\11\2\0\1\11\1\0\1\11\1\0\10\11"+
    "\3\0\3\11\1\u014b\2\0\1\11\23\0\25\11\4\0"+
    "\1\11\4\0\2\11\2\0\1\11\1\0\1\11\1\0"+
    "\10\11\3\0\4\11\2\0\1\11\23\0\13\11\1\u014c"+
    "\11\11\4\0\1\11\4\0\2\11\2\0\1\11\1\0"+
    "\1\11\1\0\10\11\3\0\4\11\2\0\1\11\23\0"+
    "\5\11\1\u014d\17\11\4\0\1\11\4\0\2\11\2\0"+
    "\1\11\1\0\1\11\1\0\10\11\3\0\4\11\2\0"+
    "\1\u014e\23\0\25\11\4\0\1\11\4\0\2\11\2\0"+
    "\1\11\1\0\1\11\1\0\10\11\3\0\4\11\2\0"+
    "\1\11\23\0\4\11\1\u014f\20\11\4\0\1\11\4\0"+
    "\2\11\2\0\1\11\1\0\1\11\1\0\10\11\3\0"+
    "\4\11\2\0\1\u0150\23\0\25\11\4\0\1\11\4\0"+
    "\2\11\2\0\1\11\1\0\1\11\1\0\10\11\3\0"+
    "\4\11\2\0\1\11\23\0\3\11\1\u0151\21\11\4\0"+
    "\1\u0152\4\0\2\11\2\0\1\11\1\0\1\11\1\0"+
    "\10\11\3\0\4\11\2\0\1\11\23\0\25\11\4\0"+
    "\1\11\4\0\2\11\2\0\1\11\1\0\1\11\1\0"+
    "\10\11\3\0\4\11\2\0\1\11\23\0\20\11\1\u0153"+
    "\4\11\4\0\1\11\4\0\2\11\2\0\1\11\1\0"+
    "\1\11\1\0\10\11\3\0\4\11\2\0\1\11\23\0"+
    "\20\11\1\u0154\4\11\4\0\1\11\4\0\2\11\2\0"+
    "\1\11\1\0\1\11\1\0\10\11\3\0\1\11\1\u0155"+
    "\2\11\2\0\1\11\23\0\25\11\4\0\1\11\4\0"+
    "\2\11\2\0\1\11\1\0\1\11\1\0\10\11\3\0"+
    "\3\11\1\u0156\2\0\1\11\23\0\25\11\4\0\1\11"+
    "\4\0\2\11\2\0\1\11\1\0\1\11\1\0\10\11"+
    "\3\0\4\11\2\0\1\11\23\0\7\11\1\u0157\15\11"+
    "\4\0\1\354\4\0\1\354\1\u0127\2\0\1\u0127\1\0"+
    "\1\354\1\0\10\354\3\0\4\354\2\0\1\354\23\0"+
    "\25\354\12\0\1\u0127\2\0\1\u0127\101\0\1\11\4\0"+
    "\2\11\2\0\1\11\1\0\1\11\1\0\10\11\3\0"+
    "\4\11\2\0\1\11\23\0\1\u0158\24\11\31\0\1\u0159"+
    "\65\0\1\u015a\5\0\1\u015a\2\0\1\u015a\1\0\1\u015a"+
    "\2\0\1\u015a\2\0\1\u015a\2\0\1\u015a\3\0\1\u015a"+
    "\34\0\1\u015a\2\0\2\u015a\11\0\1\u015a\7\0\1\u015b"+
    "\5\0\1\u015b\2\0\1\u015b\1\0\1\u015b\2\0\1\u015b"+
    "\2\0\1\u015b\2\0\1\u015b\3\0\1\u015b\34\0\1\u015b"+
    "\2\0\2\u015b\11\0\1\u015b\7\0\1\11\4\0\2\11"+
    "\2\0\1\11\1\0\1\11\1\0\10\11\3\0\4\11"+
    "\2\0\1\11\23\0\1\u015c\24\11\4\0\1\11\4\0"+
    "\2\11\2\0\1\11\1\0\1\11\1\0\10\11\3\0"+
    "\4\11\2\0\1\11\23\0\4\11\1\u015d\20\11\4\0"+
    "\1\11\4\0\2\11\2\0\1\11\1\0\1\11\1\0"+
    "\10\11\3\0\1\11\1\u015e\2\11\2\0\1\11\23\0"+
    "\25\11\4\0\1\11\4\0\2\11\2\0\1\11\1\0"+
    "\1\11\1\0\10\11\3\0\4\11\2\0\1\11\23\0"+
    "\5\11\1\u015f\17\11\4\0\1\11\4\0\2\11\2\0"+
    "\1\11\1\0\1\11\1\0\10\11\3\0\3\11\1\u0160"+
    "\2\0\1\11\23\0\25\11\4\0\1\11\4\0\2\11"+
    "\2\0\1\11\1\0\1\11\1\0\10\11\3\0\1\u0161"+
    "\1\u0162\2\11\2\0\1\11\23\0\25\11\4\0\1\11"+
    "\4\0\2\11\2\0\1\11\1\0\1\11\1\0\10\11"+
    "\3\0\4\11\2\0\1\11\23\0\3\11\1\u0163\21\11"+
    "\4\0\1\11\4\0\2\11\2\0\1\11\1\0\1\11"+
    "\1\0\10\11\3\0\3\11\1\u0164\2\0\1\11\23\0"+
    "\25\11\4\0\1\11\4\0\2\11\2\0\1\11\1\0"+
    "\1\11\1\0\10\11\3\0\4\11\2\0\1\11\23\0"+
    "\1\11\1\u0165\23\11\4\0\1\11\4\0\2\11\2\0"+
    "\1\11\1\0\1\11\1\0\10\11\3\0\4\11\2\0"+
    "\1\11\23\0\6\11\1\u0166\16\11\4\0\1\11\4\0"+
    "\2\11\2\0\1\11\1\0\1\11\1\0\10\11\3\0"+
    "\4\11\2\0\1\11\23\0\6\11\1\u0167\16\11\4\0"+
    "\1\11\4\0\2\11\2\0\1\11\1\0\1\11\1\0"+
    "\10\11\3\0\3\11\1\u0168\2\0\1\11\23\0\25\11"+
    "\4\0\1\11\4\0\2\11\2\0\1\11\1\0\1\11"+
    "\1\0\10\11\3\0\4\11\2\0\1\11\23\0\6\11"+
    "\1\u0169\16\11\4\0\1\11\4\0\2\11\2\0\1\11"+
    "\1\0\1\11\1\0\10\11\3\0\4\11\2\0\1\11"+
    "\23\0\3\11\1\u016a\21\11\4\0\1\11\4\0\2\11"+
    "\2\0\1\11\1\0\1\11\1\0\10\11\3\0\3\11"+
    "\1\u016b\2\0\1\11\23\0\25\11\4\0\1\11\4\0"+
    "\2\11\2\0\1\11\1\0\1\11\1\0\10\11\3\0"+
    "\4\11\2\0\1\11\23\0\11\11\1\u016c\13\11\4\0"+
    "\1\11\4\0\2\11\2\0\1\11\1\0\1\11\1\0"+
    "\10\11\3\0\4\11\2\0\1\11\23\0\6\11\1\u016d"+
    "\16\11\4\0\1\11\4\0\2\11\2\0\1\11\1\0"+
    "\1\11\1\0\10\11\3\0\4\11\2\0\1\11\23\0"+
    "\13\11\1\u016e\11\11\4\0\1\11\4\0\2\11\2\0"+
    "\1\11\1\0\1\11\1\0\10\11\3\0\1\11\1\u016f"+
    "\2\11\2\0\1\11\23\0\25\11\4\0\1\11\4\0"+
    "\2\11\2\0\1\11\1\0\1\11\1\0\10\11\3\0"+
    "\4\11\2\0\1\11\23\0\4\11\1\u0170\20\11\4\0"+
    "\1\u0171\4\0\2\11\2\0\1\11\1\0\1\11\1\0"+
    "\10\11\3\0\4\11\2\0\1\11\23\0\25\11\4\0"+
    "\1\11\4\0\2\11\2\0\1\11\1\0\1\11\1\0"+
    "\10\11\3\0\4\11\2\0\1\11\23\0\3\11\1\u0172"+
    "\21\11\4\0\1\11\4\0\2\11\2\0\1\11\1\0"+
    "\1\11\1\0\10\11\3\0\1\11\1\u0173\2\11\2\0"+
    "\1\11\23\0\25\11\4\0\1\11\4\0\2\11\2\0"+
    "\1\11\1\0\1\11\1\0\10\11\3\0\4\11\2\0"+
    "\1\11\23\0\21\11\1\u0174\3\11\4\0\1\11\4\0"+
    "\2\11\2\0\1\11\1\0\1\u0175\1\0\10\11\3\0"+
    "\4\11\2\0\1\11\23\0\25\11\4\0\1\11\4\0"+
    "\2\11\2\0\1\11\1\0\1\11\1\0\10\11\3\0"+
    "\4\11\2\0\1\11\23\0\7\11\1\u0176\15\11\6\0"+
    "\1\u0177\110\0\1\125\5\0\1\125\2\0\1\125\1\0"+
    "\1\125\2\0\1\125\2\0\1\125\2\0\1\125\3\0"+
    "\1\125\34\0\1\125\2\0\2\125\11\0\1\125\7\0"+
    "\1\131\5\0\1\131\2\0\1\131\1\0\1\131\2\0"+
    "\1\131\2\0\1\131\2\0\1\131\3\0\1\131\34\0"+
    "\1\131\2\0\2\131\11\0\1\131\7\0\1\11\4\0"+
    "\2\11\2\0\1\11\1\0\1\11\1\0\3\11\1\u0178"+
    "\4\11\3\0\4\11\2\0\1\11\23\0\25\11\4\0"+
    "\1\11\4\0\2\11\2\0\1\11\1\0\1\11\1\0"+
    "\10\11\3\0\4\11\2\0\1\11\23\0\12\11\1\u0179"+
    "\12\11\4\0\1\11\4\0\2\11\2\0\1\11\1\0"+
    "\1\11\1\0\10\11\3\0\4\11\2\0\1\11\23\0"+
    "\3\11\1\u017a\21\11\4\0\1\11\4\0\2\11\2\0"+
    "\1\11\1\0\1\11\1\0\10\11\3\0\4\11\2\0"+
    "\1\11\23\0\3\11\1\u017b\21\11\4\0\1\11\4\0"+
    "\2\11\2\0\1\11\1\0\1\11\1\0\1\11\1\u017c"+
    "\6\11\3\0\4\11\2\0\1\11\23\0\25\11\4\0"+
    "\1\u017d\4\0\2\11\2\0\1\11\1\0\1\11\1\0"+
    "\10\11\3\0\4\11\2\0\1\11\23\0\25\11\4\0"+
    "\1\11\4\0\2\11\2\0\1\11\1\0\1\11\1\0"+
    "\10\11\3\0\4\11\2\0\1\11\23\0\1\u017e\24\11"+
    "\4\0\1\11\4\0\2\11\2\0\1\11\1\0\1\11"+
    "\1\0\10\11\3\0\3\11\1\u017f\2\0\1\11\23\0"+
    "\25\11\4\0\1\u0180\4\0\2\11\2\0\1\11\1\0"+
    "\1\11\1\0\10\11\3\0\4\11\2\0\1\11\23\0"+
    "\25\11\4\0\1\11\4\0\2\11\2\0\1\11\1\0"+
    "\1\11\1\0\10\11\3\0\4\11\2\0\1\11\23\0"+
    "\6\11\1\u0181\16\11\4\0\1\11\4\0\2\11\2\0"+
    "\1\11\1\0\1\11\1\0\10\11\3\0\4\11\2\0"+
    "\1\u0182\23\0\25\11\4\0\1\11\4\0\2\11\2\0"+
    "\1\11\1\0\1\11\1\0\10\11\3\0\3\11\1\u0183"+
    "\2\0\1\11\23\0\25\11\4\0\1\11\4\0\2\11"+
    "\2\0\1\11\1\0\1\11\1\0\10\11\3\0\4\11"+
    "\2\0\1\11\23\0\4\11\1\u0184\20\11\4\0\1\11"+
    "\4\0\2\11\2\0\1\11\1\0\1\11\1\0\10\11"+
    "\3\0\3\11\1\u0185\2\0\1\11\23\0\25\11\4\0"+
    "\1\11\4\0\2\11\2\0\1\11\1\0\1\11\1\0"+
    "\10\11\3\0\4\11\2\0\1\11\23\0\22\11\1\u0186"+
    "\2\11\4\0\1\11\4\0\2\11\2\0\1\11\1\0"+
    "\1\11\1\0\10\11\3\0\4\11\2\0\1\11\23\0"+
    "\22\11\1\u0187\2\11\4\0\1\u0188\4\0\2\11\2\0"+
    "\1\11\1\0\1\11\1\0\10\11\3\0\4\11\2\0"+
    "\1\11\23\0\25\11\5\0\1\u0189\111\0\1\11\4\0"+
    "\2\11\2\0\1\11\1\0\1\11\1\0\10\11\3\0"+
    "\1\11\1\u018a\2\11\2\0\1\11\23\0\25\11\4\0"+
    "\1\11\4\0\2\11\2\0\1\11\1\0\1\11\1\0"+
    "\10\11\3\0\4\11\2\0\1\11\23\0\6\11\1\u018b"+
    "\16\11\4\0\1\11\4\0\2\11\2\0\1\11\1\0"+
    "\1\11\1\0\10\11\3\0\4\11\2\0\1\11\23\0"+
    "\4\11\1\u018c\20\11\4\0\1\11\4\0\2\11\2\0"+
    "\1\11\1\0\1\11\1\0\10\11\3\0\4\11\2\0"+
    "\1\11\23\0\4\11\1\u018d\20\11\4\0\1\11\4\0"+
    "\2\11\2\0\1\11\1\0\1\11\1\0\10\11\3\0"+
    "\1\11\1\u018e\2\11\2\0\1\11\23\0\25\11\4\0"+
    "\1\11\4\0\2\11\2\0\1\11\1\0\1\11\1\0"+
    "\10\11\3\0\3\11\1\u018f\2\0\1\11\23\0\25\11"+
    "\4\0\1\u0190\4\0\2\11\2\0\1\11\1\0\1\11"+
    "\1\0\10\11\3\0\4\11\2\0\1\11\23\0\25\11"+
    "\4\0\1\11\4\0\2\11\2\0\1\11\1\0\1\11"+
    "\1\0\10\11\3\0\3\11\1\u0191\2\0\1\11\23\0"+
    "\25\11\4\0\1\u0192\4\0\2\11\2\0\1\11\1\0"+
    "\1\11\1\0\10\11\3\0\4\11\2\0\1\11\23\0"+
    "\25\11\4\0\1\11\4\0\2\11\2\0\1\11\1\0"+
    "\1\11\1\0\10\11\3\0\4\11\2\0\1\11\23\0"+
    "\23\11\1\u0193\1\11\22\0\1\u0194\74\0\1\u0195\4\0"+
    "\2\11\2\0\1\11\1\0\1\11\1\0\10\11\3\0"+
    "\4\11\2\0\1\11\23\0\25\11\4\0\1\u0196\4\0"+
    "\2\11\2\0\1\11\1\0\1\11\1\0\10\11\3\0"+
    "\4\11\2\0\1\11\23\0\25\11\4\0\1\11\4\0"+
    "\2\11\2\0\1\11\1\0\1\11\1\0\10\11\3\0"+
    "\3\11\1\u0197\2\0\1\11\23\0\25\11\4\0\1\11"+
    "\4\0\2\11\2\0\1\11\1\0\1\11\1\0\10\11"+
    "\3\0\4\11\2\0\1\11\23\0\7\11\1\u0198\15\11"+
    "\4\0\1\11\4\0\2\11\2\0\1\11\1\0\1\11"+
    "\1\0\10\11\3\0\4\11\2\0\1\11\23\0\24\11"+
    "\1\u0199\34\0\1\u019a\62\0\1\11\4\0\2\11\2\0"+
    "\1\11\1\0\1\11\1\0\10\11\3\0\4\11\2\0"+
    "\1\11\23\0\5\11\1\u019b\17\11\4\0\1\11\4\0"+
    "\2\11\2\0\1\11\1\0\1\11\1\0\6\11\1\u019c"+
    "\1\11\3\0\4\11\2\0\1\11\23\0\25\11\35\0"+
    "\1\u019d\61\0\1\11\4\0\2\11\2\0\1\11\1\0"+
    "\1\11\1\0\10\11\3\0\4\11\2\0\1\11\23\0"+
    "\22\11\1\u019e\2\11\36\0\1\u019f\113\0\1\u01a0\113\0"+
    "\1\u01a1\113\0\1\125\51\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[22800];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\17\1\1\11\6\1\1\11\1\1\5\11"+
    "\6\1\4\11\3\1\1\11\14\1\1\0\1\11\4\1"+
    "\1\0\1\1\1\0\1\1\1\11\1\0\1\1\1\0"+
    "\2\1\2\11\2\1\2\11\4\1\3\0\1\11\2\0"+
    "\1\11\12\1\2\11\4\1\11\11\46\1\1\0\2\1"+
    "\1\0\4\1\1\11\4\1\1\0\1\11\3\0\20\1"+
    "\3\11\1\1\1\11\47\1\2\11\6\1\3\0\15\1"+
    "\1\11\46\1\1\0\2\1\3\0\53\1\3\0\33\1"+
    "\1\0\21\1\1\0\12\1\1\0\5\1\1\0\2\1"+
    "\1\0\1\1\3\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[417];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _ZenCodeLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _ZenCodeLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 145: break;
          case 2: 
            { return T_WHITESPACE_CARRIAGE_RETURN;
            } 
            // fall through
          case 146: break;
          case 3: 
            { return T_IDENTIFIER;
            } 
            // fall through
          case 147: break;
          case 4: 
            { return T_DIV;
            } 
            // fall through
          case 148: break;
          case 5: 
            { return T_MUL;
            } 
            // fall through
          case 149: break;
          case 6: 
            { return T_INT;
            } 
            // fall through
          case 150: break;
          case 7: 
            { return T_DOLLAR;
            } 
            // fall through
          case 151: break;
          case 8: 
            { return T_SUB;
            } 
            // fall through
          case 152: break;
          case 9: 
            { return T_DOT;
            } 
            // fall through
          case 153: break;
          case 10: 
            { return T_ADD;
            } 
            // fall through
          case 154: break;
          case 11: 
            { return T_SQOPEN;
            } 
            // fall through
          case 155: break;
          case 12: 
            { return T_AND;
            } 
            // fall through
          case 156: break;
          case 13: 
            { return T_SQCLOSE;
            } 
            // fall through
          case 157: break;
          case 14: 
            { return T_WHITESPACE_TAB;
            } 
            // fall through
          case 158: break;
          case 15: 
            { return T_WHITESPACE_SPACE;
            } 
            // fall through
          case 159: break;
          case 16: 
            { return T_AOPEN;
            } 
            // fall through
          case 160: break;
          case 17: 
            { return T_ACLOSE;
            } 
            // fall through
          case 161: break;
          case 18: 
            { return T_COMMA;
            } 
            // fall through
          case 162: break;
          case 19: 
            { return T_GREATEREQ;
            } 
            // fall through
          case 163: break;
          case 20: 
            { return T_CAT;
            } 
            // fall through
          case 164: break;
          case 21: 
            { return T_MOD;
            } 
            // fall through
          case 165: break;
          case 22: 
            { return T_OR;
            } 
            // fall through
          case 166: break;
          case 23: 
            { return T_XOR;
            } 
            // fall through
          case 167: break;
          case 24: 
            { return T_QUEST;
            } 
            // fall through
          case 168: break;
          case 25: 
            { return T_COLON;
            } 
            // fall through
          case 169: break;
          case 26: 
            { return T_BROPEN;
            } 
            // fall through
          case 170: break;
          case 27: 
            { return T_BRCLOSE;
            } 
            // fall through
          case 171: break;
          case 28: 
            { return T_SEMICOLON;
            } 
            // fall through
          case 172: break;
          case 29: 
            { return T_LESS;
            } 
            // fall through
          case 173: break;
          case 30: 
            { return T_GREATER;
            } 
            // fall through
          case 174: break;
          case 31: 
            { return T_NOT;
            } 
            // fall through
          case 175: break;
          case 32: 
            { return T_BACKTICK;
            } 
            // fall through
          case 176: break;
          case 33: 
            { return T_COMMENT_SCRIPT;
            } 
            // fall through
          case 177: break;
          case 34: 
            { return T_COMMENT_SINGLELINE;
            } 
            // fall through
          case 178: break;
          case 35: 
            { return T_DIVASSIGN;
            } 
            // fall through
          case 179: break;
          case 36: 
            { return T_MULASSIGN;
            } 
            // fall through
          case 180: break;
          case 37: 
            { return T_LOCAL_IDENTIFIER;
            } 
            // fall through
          case 181: break;
          case 38: 
            { return T_DECREMENT;
            } 
            // fall through
          case 182: break;
          case 39: 
            { return T_SUBASSIGN;
            } 
            // fall through
          case 183: break;
          case 40: 
            { return T_DOT2;
            } 
            // fall through
          case 184: break;
          case 41: 
            { return T_INCREMENT;
            } 
            // fall through
          case 185: break;
          case 42: 
            { return T_ADDASSIGN;
            } 
            // fall through
          case 186: break;
          case 43: 
            { return T_STRING_DQ;
            } 
            // fall through
          case 187: break;
          case 44: 
            { return T_STRING_SQ;
            } 
            // fall through
          case 188: break;
          case 45: 
            { return T_ANDAND;
            } 
            // fall through
          case 189: break;
          case 46: 
            { return T_ANDASSIGN;
            } 
            // fall through
          case 190: break;
          case 47: 
            { return T_EQUAL2;
            } 
            // fall through
          case 191: break;
          case 48: 
            { return T_LAMBDA;
            } 
            // fall through
          case 192: break;
          case 49: 
            { return T_CATASSIGN;
            } 
            // fall through
          case 193: break;
          case 50: 
            { return T_MODASSIGN;
            } 
            // fall through
          case 194: break;
          case 51: 
            { return T_ORASSIGN;
            } 
            // fall through
          case 195: break;
          case 52: 
            { return T_OROR;
            } 
            // fall through
          case 196: break;
          case 53: 
            { return T_XORASSIGN;
            } 
            // fall through
          case 197: break;
          case 54: 
            { return T_OPTCALL;
            } 
            // fall through
          case 198: break;
          case 55: 
            { return T_COALESCE;
            } 
            // fall through
          case 199: break;
          case 56: 
            { return T_LESSEQ;
            } 
            // fall through
          case 200: break;
          case 57: 
            { return T_SHL;
            } 
            // fall through
          case 201: break;
          case 58: 
            { return T_SHR;
            } 
            // fall through
          case 202: break;
          case 59: 
            { return T_NOTEQUAL;
            } 
            // fall through
          case 203: break;
          case 60: 
            { return K_IF;
            } 
            // fall through
          case 204: break;
          case 61: 
            { return K_IN;
            } 
            // fall through
          case 205: break;
          case 62: 
            { return K_IS;
            } 
            // fall through
          case 206: break;
          case 63: 
            { return K_AS;
            } 
            // fall through
          case 207: break;
          case 64: 
            { return K_DO;
            } 
            // fall through
          case 208: break;
          case 65: 
            { return T_COMMENT_MULTILINE;
            } 
            // fall through
          case 209: break;
          case 66: 
            { return T_FLOAT;
            } 
            // fall through
          case 210: break;
          case 67: 
            { return T_PREFIXED_INT;
            } 
            // fall through
          case 211: break;
          case 68: 
            { return T_DOT3;
            } 
            // fall through
          case 212: break;
          case 69: 
            { return T_STRING_DQ_WYSIWYG;
            } 
            // fall through
          case 213: break;
          case 70: 
            { return K_FOR;
            } 
            // fall through
          case 214: break;
          case 71: 
            { return K_NEW;
            } 
            // fall through
          case 215: break;
          case 72: 
            { return K_TRY;
            } 
            // fall through
          case 216: break;
          case 73: 
            { return T_EQUAL3;
            } 
            // fall through
          case 217: break;
          case 74: 
            { return T_SHLASSIGN;
            } 
            // fall through
          case 218: break;
          case 75: 
            { return T_SHRASSIGN;
            } 
            // fall through
          case 219: break;
          case 76: 
            { return T_USHR;
            } 
            // fall through
          case 220: break;
          case 77: 
            { return T_NOTEQUAL2;
            } 
            // fall through
          case 221: break;
          case 78: 
            { return K_INT;
            } 
            // fall through
          case 222: break;
          case 79: 
            { return K_SET;
            } 
            // fall through
          case 223: break;
          case 80: 
            { return K_VAR;
            } 
            // fall through
          case 224: break;
          case 81: 
            { return K_VAL;
            } 
            // fall through
          case 225: break;
          case 82: 
            { return K_GET;
            } 
            // fall through
          case 226: break;
          case 83: 
            { return K_ENUM;
            } 
            // fall through
          case 227: break;
          case 84: 
            { return K_ELSE;
            } 
            // fall through
          case 228: break;
          case 85: 
            { return T_STRING_SQ_WYSIWYG;
            } 
            // fall through
          case 229: break;
          case 86: 
            { return K_BOOL;
            } 
            // fall through
          case 230: break;
          case 87: 
            { return K_BYTE;
            } 
            // fall through
          case 231: break;
          case 88: 
            { return K_NULL;
            } 
            // fall through
          case 232: break;
          case 89: 
            { return K_TRUE;
            } 
            // fall through
          case 233: break;
          case 90: 
            { return K_THIS;
            } 
            // fall through
          case 234: break;
          case 91: 
            { return K_UINT;
            } 
            // fall through
          case 235: break;
          case 92: 
            { return T_USHRASSIGN;
            } 
            // fall through
          case 236: break;
          case 93: 
            { return K_LONG;
            } 
            // fall through
          case 237: break;
          case 94: 
            { return K_LOCK;
            } 
            // fall through
          case 238: break;
          case 95: 
            { return K_CASE;
            } 
            // fall through
          case 239: break;
          case 96: 
            { return K_CHAR;
            } 
            // fall through
          case 240: break;
          case 97: 
            { return K_VOID;
            } 
            // fall through
          case 241: break;
          case 98: 
            { return K_BREAK;
            } 
            // fall through
          case 242: break;
          case 99: 
            { return K_FINAL;
            } 
            // fall through
          case 243: break;
          case 100: 
            { return K_FALSE;
            } 
            // fall through
          case 244: break;
          case 101: 
            { return K_FLOAT;
            } 
            // fall through
          case 245: break;
          case 102: 
            { return K_THROW;
            } 
            // fall through
          case 246: break;
          case 103: 
            { return K_ULONG;
            } 
            // fall through
          case 247: break;
          case 104: 
            { return K_USIZE;
            } 
            // fall through
          case 248: break;
          case 105: 
            { return K_MATCH;
            } 
            // fall through
          case 249: break;
          case 106: 
            { return K_PANIC;
            } 
            // fall through
          case 250: break;
          case 107: 
            { return K_ALIAS;
            } 
            // fall through
          case 251: break;
          case 108: 
            { return K_SBYTE;
            } 
            // fall through
          case 252: break;
          case 109: 
            { return K_SUPER;
            } 
            // fall through
          case 253: break;
          case 110: 
            { return K_SHORT;
            } 
            // fall through
          case 254: break;
          case 111: 
            { return K_CONST;
            } 
            // fall through
          case 255: break;
          case 112: 
            { return K_CATCH;
            } 
            // fall through
          case 256: break;
          case 113: 
            { return K_CLASS;
            } 
            // fall through
          case 257: break;
          case 114: 
            { return K_WHILE;
            } 
            // fall through
          case 258: break;
          case 115: 
            { return K_EXTERN;
            } 
            // fall through
          case 259: break;
          case 116: 
            { return K_EXPORT;
            } 
            // fall through
          case 260: break;
          case 117: 
            { return K_EXPAND;
            } 
            // fall through
          case 261: break;
          case 118: 
            { return K_RETURN;
            } 
            // fall through
          case 262: break;
          case 119: 
            { return K_THROWS;
            } 
            // fall through
          case 263: break;
          case 120: 
            { return K_USHORT;
            } 
            // fall through
          case 264: break;
          case 121: 
            { return K_IMPORT;
            } 
            // fall through
          case 265: break;
          case 122: 
            { return K_PUBLIC;
            } 
            // fall through
          case 266: break;
          case 123: 
            { return K_STRUCT;
            } 
            // fall through
          case 267: break;
          case 124: 
            { return K_STRING;
            } 
            // fall through
          case 268: break;
          case 125: 
            { return K_STATIC;
            } 
            // fall through
          case 269: break;
          case 126: 
            { return K_SWITCH;
            } 
            // fall through
          case 270: break;
          case 127: 
            { return K_DOUBLE;
            } 
            // fall through
          case 271: break;
          case 128: 
            { return K_FINALLY;
            } 
            // fall through
          case 272: break;
          case 129: 
            { return K_PRIVATE;
            } 
            // fall through
          case 273: break;
          case 130: 
            { return K_DEFAULT;
            } 
            // fall through
          case 274: break;
          case 131: 
            { return K_VIRTUAL;
            } 
            // fall through
          case 275: break;
          case 132: 
            { return K_VARIANT;
            } 
            // fall through
          case 276: break;
          case 133: 
            { return K_AOPEN;
            } 
            // fall through
          case 277: break;
          case 134: 
            { return K_OVERRIDE;
            } 
            // fall through
          case 278: break;
          case 135: 
            { return K_FUNCTION;
            } 
            // fall through
          case 279: break;
          case 136: 
            { return K_INTERNAL;
            } 
            // fall through
          case 280: break;
          case 137: 
            { return K_IMPLICIT;
            } 
            // fall through
          case 281: break;
          case 138: 
            { return K_ABSTRACT;
            } 
            // fall through
          case 282: break;
          case 139: 
            { return K_CONTINUE;
            } 
            // fall through
          case 283: break;
          case 140: 
            { return K_INTERFACE;
            } 
            // fall through
          case 284: break;
          case 141: 
            { return K_IMMUTABLE;
            } 
            // fall through
          case 285: break;
          case 142: 
            { return K_PROTECTED;
            } 
            // fall through
          case 286: break;
          case 143: 
            { return K_IMPLEMENTS;
            } 
            // fall through
          case 287: break;
          case 144: 
            { return K_EXPANSION;
            } 
            // fall through
          case 288: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
